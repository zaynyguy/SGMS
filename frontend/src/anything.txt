JSON file for admin page

  {
  "Admin": {
    "title": "Administration",
    "usersTab": "Users",
    "rolesTab": "Roles & Permissions",
    "settingsTab": "Settings",
    "auditLogTab": "Audit Log",
    "inviteUser": "Invite User",
    "editUser": "Edit User",
    "sendInvite": "Send Invite",
    "saveChanges": "Save Changes",
    "nameLabel": "Name",
    "emailLabel": "Email",
    "roleLabel": "Role",
    "statusLabel": "Status",
    "actionsLabel": "Actions",
    "noUsersTitle": "No users invited yet.",
    "editButton": "Edit",
    "deleteButton": "Delete",
    "confirmDeleteTitle": "Confirm Deletion",
    "confirmDeleteMessage": "Are you sure you want to delete user {{name}}? This action cannot be undone.",
    "cancelButton": "Cancel",
    "deleteButtonConfirm": "Delete",
    "rolesTitle": "Roles",
    "permissionsTitle": "Permissions",
    "addRoleButton": "Add Role",
    "addRoleModalTitle": "Add New Role",
    "roleNameLabel": "Role Name",
    "settingsTitle": "System Settings",
    "reportingPeriodTitle": "Reporting Period",
    "monthlyReportDueDateLabel": "Monthly Report Due Date",
    "fiscalYearStartLabel": "Fiscal Year Start",
    "emailServerTitle": "Email Server",
    "smtpHostLabel": "SMTP Host",
    "portLabel": "Port",
    "usernameLabel": "Username",
    "passwordLabel": "Password",
    "testConnectionButton": "Test Connection",
    "fileUploadSettingsTitle": "File Upload Settings",
    "maxFileSizeLabel": "Max File Size (MB)",
    "allowedFileTypesLabel": "Allowed File Types",
    "notificationsTitle": "Notifications",
    "notifyReportDueLabel": "Notify when report due",
    "notifyOnSubmissionLabel": "Notify on submission",
    "weeklySummaryEmailLabel": "Weekly summary email",
    "emailTemplatesTitle": "Email Templates",
    "saveSettingsButton": "Save Settings",
    "auditLogTitle": "Audit Log",
    "exportCsvButton": "Export CSV",
    "searchLogsPlaceholder": "Search logs…",
    "fromDateLabel": "From Date",
    "toDateLabel": "To Date",
    "applyFiltersButton": "Apply Filters",
    "timestampLabel": "Timestamp",
    "userLabel": "User",
    "entityLabel": "Entity",
    "actionLabel": "Action",
    "detailsLabel": "Details",
    "noLogsMessage": "No audit log entries found for the current filters.",
    "userUpdatedToast": "User {{name}} updated successfully!",
    "userInvitedToast": "User {{name}} invited successfully!",
    "userDeletedToast": "User {{name}} deleted.",
    "userStatusChangeToast": "User status for {{name}} changed to {{status}}.",
    "roleAddedToast": "Role '{{name}}' added.",
    "roleNameRequiredError": "Role name cannot be empty.",
    "roleExistsError": "Role with this name already exists.",
    "permissionsUpdatedToast": "Permissions updated.",
    "connectionFailedToast": "Connection failed. Check credentials and host.",
    "connectionSuccessToast": "Connection successful!",
    "connectionTestInfoToast": "Testing connection...",
    "emailDetailsError": "Please fill in all email server details to test connection.",
    "settingsSavedToast": "Settings saved successfully!",
    "filtersAppliedToast": "Filters applied!",
    "csvExportSuccessToast": "Audit log exported to CSV!",
    "csvExportErrorToast": "Your browser does not support downloading files directly.",
    "nameRequiredError": "Name is required",
    "emailRequiredError": "Email is required",
    "invalidEmailError": "Invalid email address",
    "roleRequiredError": "Role is required",
    "selectRolePlaceholder": "Select a role",
    "projectNamePlaceholder": "e.g., Project X",
    "userEmailPlaceholder": "user@example.com",
    "namePlaceholder": "e.g., Jane Doe",
    "smtpHostPlaceholder": "e.g., smtp.example.com",
    "smtpPortPlaceholder": "e.g., 587",
    "smtpUsernamePlaceholder": "e.g., your_email@example.com",
    "smtpPasswordPlaceholder": "Your email password",
    "maxFileSizePlaceholder": "e.g., 50",
    "allowedFileTypesPlaceholder": "e.g., .pdf, .jpg, .png",
    "emailTemplatePlaceholder": "Template for report reminders:\n\nHi [User Name],\n\nThis is a reminder that your [Report Type] report is due on [Due Date].\n\nBest regards,\nThe Admin Team",
    "admin": "Admin",
    "projectLead": "Project Lead",
    "clerk": "Clerk",
    "createProject": "Create Project",
    "editProject": "Edit Project",
    "deleteProject": "Delete Project",
    "viewReports": "View Reports",
    "manageUsers": "Manage Users",
    "permissionLabel": "Permission",
    "defineFirstRole": "Define your first role."
  }
 }




 import React, { useState } from 'react';
import { useNavigate } from 'react-router-dom';
import { useTranslation } from 'react-i18next';        // <-- import hook
import companyLogo from '../assets/logo.png';
import { ChevronDown } from 'lucide-react';
import { useAuth } from '../context/AuthContext';

export default function Login() {
  const { t, i18n } = useTranslation();             // get t() and i18n
  const [name, setName] = useState('');
  const [password, setPassword] = useState('');
  const [remember, setRemember] = useState(false);
  const [error, setError] = useState(null);
  const { saveAuth } = useAuth();
  const navigate = useNavigate();

const handleSubmit = async (e) => {
  e.preventDefault();
  setError(null);

  try {
    const response = await fetch('/auth/login', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ username: name, password }), // ✅ key fixed
    });

    const data = await response.json();
    if (!response.ok) throw new Error(data.message || t('login.error_default'));

    // ✅ Save JWT and user in context
    saveAuth({ token: data.token, user: data.user });

    // ✅ Remember option handling
    if (remember) {
      localStorage.setItem('remember', 'true');
    } else {
      localStorage.removeItem('remember');
    }

    navigate('/dashboard');
  } catch (err) {
    setError(err.message);
  }
};

  return (
    <div className="min-h-screen w-full bg-gradient-to-br from-green-600 via-gray-600 to-blue-500 flex items-center justify-center font-sans p-4">
      <div className="w-full max-w-6xl grid md:grid-cols-2 rounded-3xl overflow-hidden shadow-2xl relative">
        <div className="absolute inset-0 bg-white/10 backdrop-blur-xl z-0"></div>
        <div className="w-full p-8 md:p-12 flex flex-col justify-center text-white relative z-10">
          <h1 className="text-4xl font-bold mb-2">{t('login.title')}</h1>
          <p className="text-white/80 mb-2">{t('login.subtitle')}</p>
          <p className="text-white/80 mb-8">{t('login.prompt')}</p>

          <form className="space-y-4" onSubmit={handleSubmit}>
            <div>
              <label className="text-sm font-light text-white/80">
                {t('login.username_label')}
              </label>
              <input
                type="text"
                placeholder={t('login.username_placeholder')}
                className="w-full mt-2 px-4 py-3 bg-black/30 rounded-lg border border-white/20 focus:outline-none transition-all duration-300"
                value={name}
                onChange={(e) => setName(e.target.value)}
                required
              />
            </div>
            <div>
              <label className="text-sm font-light text-white/80">
                {t('login.password_label')}
              </label>
              <input
                type="password"
                placeholder={t('login.password_placeholder')}
                className="w-full mt-2 px-4 py-3 bg-black/30 rounded-lg border border-white/20 focus:outline-none transition-all duration-300"
                value={password}
                onChange={(e) => setPassword(e.target.value)}
                required
              />
            </div>
            <div className="flex justify-between items-center text-sm">
              <div className="flex items-center">
                <input
                  type="checkbox"
                  id="keep-logged-in"
                  className="h-4 w-4 rounded bg-black/30 border-white/30 focus:ring-pink-500"
                  checked={remember}
                  onChange={() => setRemember(!remember)}
                />
                <label htmlFor="keep-logged-in" className="ml-2 text-white/80">
                  {t('login.remember_label')}
                </label>
              </div>
              <a href="#" className="font-medium text-white/80 hover:text-white transition-colors">
                {t('login.forgot_password')}
              </a>
            </div>
            {error && <p className="text-red-400">{error}</p>}
            <div>
              <button
                type="submit"
                className="w-full py-3 bg-gradient-to-r from-green-500 to-blue-500 hover:from-green-600 hover:to-blue-600 rounded-lg font-bold text-white shadow-lg hover:shadow-xl transition-all duration-300"
              >
                {t('login.button_signin')}
              </button>
            </div>
          </form>

          <div className="mt-6">
            <label htmlFor="language" className="block text-sm font-medium text-white/80 mb-1">
              {t('login.language_label')}
            </label>
            <div className="relative">
              <select
                id="language"
                name="language"
                autoComplete="language-name"
                className="w-full appearance-none rounded-md bg-white py-1.5 pl-3 pr-8 text-gray-900 focus:outline-none"
                onChange={(e) => i18n.changeLanguage(e.target.value)}
              >
                <option value="en">{t('login.lang_en')}</option>
                <option value="or">{t('login.lang_or')}</option>
                <option value="am">{t('login.lang_am')}</option>
                <option value="hr">{t('login.lang_hr')}</option>
              </select>
              <ChevronDown
                aria-hidden="true"
                className="pointer-events-none absolute right-2 top-1/2 transform -translate-y-1/2 text-gray-500"
              />
            </div>
          </div>
        </div>

        <div className="hidden md:flex flex-col justify-between relative text-white p-8 md:pr-0 md:p-12">
          <div className="relative bg-gray-300 rounded-l-3xl h-full flex flex-col justify-center">
            <img src={companyLogo} alt="Company Logo" className="mx-auto" />
          </div>
        </div>
      </div>
    </div>
  );
}