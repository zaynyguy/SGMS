import React, { useState, useEffect } from 'react';
import { fetchTasksByGoal, createTask, updateTask, deleteTask } from '../api/tasks';
import { fetchUsers } from '../api/admin';
import { fetchGoals } from '../api/goals'; // Import goals API

const App = () => {
  // State for task data
  const [tasks, setTasks] = useState([]);
  const [users, setUsers] = useState([]);
  const [goals, setGoals] = useState([]); // Store goals for dropdown
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);

  // State for filters and sorting
  const [statusFilter, setStatusFilter] = useState('all');
  const [priorityFilter, setPriorityFilter] = useState('all');
  const [assigneeFilter, setAssigneeFilter] = useState('all');
  const [searchQuery, setSearchQuery] = useState('');
  const [sortBy, setSortBy] = useState('newest');
  const [selectedGoalId, setSelectedGoalId] = useState('');

  // State for modals
  const [showCreateModal, setShowCreateModal] = useState(false);
  const [showEditModal, setShowEditModal] = useState(false);
  const [editTaskData, setEditTaskData] = useState(null);
  const [showConfirmModal, setShowConfirmModal] = useState(false);
  const [taskToDelete, setTaskToDelete] = useState(null);

  // Fetch tasks, users, and goals when component mounts
  useEffect(() => {
    loadData();
  }, []);

  // Fetch tasks when selected goal changes
  useEffect(() => {
    if (selectedGoalId) {
      loadTasks();
    }
  }, [selectedGoalId]);

  // Load tasks, users, and goals from API
  const loadData = async () => {
    try {
      setLoading(true);
      
      // Load goals first
      const goalsResponse = await fetchGoals();
      if (goalsResponse.data && goalsResponse.data.length > 0) {
        setGoals(goalsResponse.data);
        setSelectedGoalId(goalsResponse.data[0].id); // Set first goal as default
      }
      
      // Load users
      const usersResponse = await fetchUsers();
      if (usersResponse.data) {
        setUsers(usersResponse.data);
      }
      
      setError(null);
    } catch (err) {
      setError('Failed to load data. Please try again.');
      console.error('Error loading data:', err);
    } finally {
      setLoading(false);
    }
  };

  // Load tasks for the selected goal
  const loadTasks = async () => {
    try {
      setLoading(true);
      const tasksResponse = await fetchTasksByGoal(selectedGoalId);
      if (tasksResponse.data) {
        setTasks(tasksResponse.data);
      }
      setError(null);
    } catch (err) {
      setError('Failed to load tasks. Please try again.');
      console.error('Error loading tasks:', err);
    } finally {
      setLoading(false);
    }
  };

  // Helper functions for modals
  const openCreateModal = () => setShowCreateModal(true);
  const closeCreateModal = () => setShowCreateModal(false);

  const openEditModal = (task) => {
    setEditTaskData(task);
    setShowEditModal(true);
  };
  const closeEditModal = () => {
    setShowEditModal(false);
    setEditTaskData(null);
  };

  const openConfirmModal = (taskId) => {
    setTaskToDelete(taskId);
    setShowConfirmModal(true);
  };
  const closeConfirmModal = () => {
    setShowConfirmModal(false);
    setTaskToDelete(null);
  };

  // Function to calculate and return filtered and sorted tasks
  const getVisibleTasks = () => {
    let filteredTasks = [...tasks];

    // Filter by status
    if (statusFilter !== 'all') {
      filteredTasks = filteredTasks.filter(task => task.status === statusFilter);
    }

    // Filter by priority
    if (priorityFilter !== 'all') {
      filteredTasks = filteredTasks.filter(task => task.priority === priorityFilter);
    }

    // Filter by assignee (now using assigneeId)
    if (assigneeFilter !== 'all') {
      filteredTasks = filteredTasks.filter(task => task.assigneeId == assigneeFilter);
    }

    // Filter by search query
    if (searchQuery.length > 0) {
      filteredTasks = filteredTasks.filter(task =>
        task.title.toLowerCase().includes(searchQuery.toLowerCase()) ||
        (task.description && task.description.toLowerCase().includes(searchQuery.toLowerCase()))
      );
    }

    // Sort the filtered tasks
    switch (sortBy) {
      case 'newest':
        return filteredTasks.sort((a, b) => new Date(b.createdAt || 0) - new Date(a.createdAt || 0));
      case 'oldest':
        return filteredTasks.sort((a, b) => new Date(a.createdAt || 0) - new Date(b.createdAt || 0));
      case 'dueDate':
        return filteredTasks.sort((a, b) => new Date(a.dueDate || 0) - new Date(b.dueDate || 0));
      case 'priority':
        const priorityOrder = { 'high': 1, 'medium': 2, 'low': 3 };
        return filteredTasks.sort((a, b) => priorityOrder[a.priority] - priorityOrder[b.priority]);
      default:
        return filteredTasks;
    }
  };

  const visibleTasks = getVisibleTasks();

  // Handle task creation
  const handleCreateTask = async (e) => {
    e.preventDefault();
    const form = e.target;
    const newTask = {
      title: form.taskTitle.value,
      description: form.taskDescription.value,
      assigneeId: parseInt(form.taskAssignee.value) || null,
      dueDate: form.taskDueDate.value,
      priority: form.taskPriority.value,
      status: form.taskStatus.value,
    };
    
    try {
      const response = await createTask(selectedGoalId, newTask);
      if (response.data) {
        setTasks([...tasks, response.data]);
        closeCreateModal();
        form.reset();
      }
    } catch (err) {
      setError('Failed to create task. Please try again.');
      console.error('Error creating task:', err);
    }
  };

  // Handle task editing
  const handleEditTask = async (e) => {
    e.preventDefault();
    const form = e.target;
    const updatedTask = {
      title: form.editTaskTitle.value,
      description: form.editTaskDescription.value,
      assigneeId: parseInt(form.editTaskAssignee.value) || null,
      dueDate: form.editTaskDueDate.value,
      priority: form.editTaskPriority.value,
      status: form.editTaskStatus.value,
    };
    
    try {
      const response = await updateTask(editTaskData.id, updatedTask);
      if (response.data) {
        setTasks(tasks.map(t => t.id === response.data.id ? response.data : t));
        closeEditModal();
      }
    } catch (err) {
      setError('Failed to update task. Please try again.');
      console.error('Error updating task:', err);
    }
  };

  // Handle task deletion
  const handleDeleteTask = async () => {
    try {
      await deleteTask(taskToDelete);
      setTasks(tasks.filter(task => task.id !== taskToDelete));
      closeConfirmModal();
    } catch (err) {
      setError('Failed to delete task. Please try again.');
      console.error('Error deleting task:', err);
    }
  };

  // Calculate dynamic stats
  const totalTasks = tasks.length;
  const completedTasks = tasks.filter(task => task.status === 'completed').length;
  const inProgressTasks = tasks.filter(task => task.status === 'inprogress').length;
  const overdueTasks = tasks.filter(task => {
    if (!task.dueDate || task.status === 'completed') return false;
    const today = new Date();
    const due = new Date(task.dueDate);
    return due < today;
  }).length;
  
  // Determine due date status
  const getDueDateStatus = (dueDate, status) => {
    if (status === 'completed' || !dueDate) return null;
    
    const today = new Date();
    const due = new Date(dueDate);
    const timeDiff = due.getTime() - today.getTime();
    const daysDiff = Math.ceil(timeDiff / (1000 * 3600 * 24));
    
    if (daysDiff < 0) return 'overdue';
    if (daysDiff <= 7) return 'dueSoon';
    return null;
  };

  // Get status badge class
  const getStatusBadgeClass = (status) => {
    switch(status) {
      case 'completed': return 'bg-green-100 dark:bg-green-900 text-green-800 dark:text-green-200';
      case 'inprogress': return 'bg-yellow-100 dark:bg-yellow-900 text-yellow-800 dark:text-yellow-200';
      default: return 'bg-gray-200 dark:bg-gray-700 text-gray-800 dark:text-gray-200';
    }
  };

  // Get status text
  const getStatusText = (status) => {
    switch(status) {
      case 'completed': return 'Completed';
      case 'inprogress': return 'In Progress';
      default: return 'To Do';
    }
  };

  // Get priority badge class
  const getPriorityBadgeClass = (priority) => {
    switch(priority) {
      case 'high': return 'bg-red-500 text-white';
      case 'medium': return 'bg-yellow-500 text-white';
      case 'low': return 'bg-green-500 text-white';
      default: return 'bg-gray-500 text-white';
    }
  };

  // Get priority text
  const getPriorityText = (priority) => {
    return `${priority.charAt(0).toUpperCase() + priority.slice(1)} Priority`;
  };

  // Get assignee name from ID
  const getAssigneeName = (assigneeId) => {
    if (!assigneeId) return 'Unassigned';
    const user = users.find(u => u.id === assigneeId);
    return user ? `${user.firstName} ${user.lastName}` : 'Unknown User';
  };

  if (loading && goals.length === 0) {
    return (
      <div className="min-h-screen flex items-center justify-center">
        <div className="text-xl">Loading tasks...</div>
      </div>
    );
  }

  return (
    <div className="min-h-screen font-sans transition-colors duration-300 bg-gray-100 text-gray-800 dark:bg-gray-900 dark:text-gray-200">
      <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css" />

      <div className="container mx-auto px-4 py-8">
        {/* Error message */}
        {error && (
          <div className="bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded relative mb-4 dark:bg-red-900 dark:border-red-700 dark:text-red-200">
            <span className="block sm:inline">{error}</span>
            <button className="absolute top-0 right-0 p-3" onClick={() => setError(null)}>
              <i className="fas fa-times"></i>
            </button>
          </div>
        )}
        
        {/* Header Section */}
        <header className="flex flex-col sm:flex-row justify-between items-center mb-8 gap-4">
          <h1 className="text-3xl font-bold text-blue-600 dark:text-blue-400">Task Manager</h1>
          
          <div className="w-full sm:w-auto md:w-96">
            <div className="relative">
              <input 
                type="text" 
                placeholder="Search tasks..." 
                value={searchQuery}
                onChange={(e) => setSearchQuery(e.target.value)}
                className="w-full px-4 py-2 rounded-lg border border-gray-300 dark:border-gray-700 bg-white dark:bg-gray-800 focus:outline-none focus:ring-2 focus:ring-blue-500 pr-10"
              />
              <i className="fas fa-search absolute right-3 top-3 text-gray-400"></i>
            </div>
          </div>
          
          <div className="flex items-center gap-4">
            {/* Goal Selector - Now dynamic */}
            <select 
              value={selectedGoalId}
              onChange={(e) => setSelectedGoalId(e.target.value)}
              className="px-3 py-2 border border-gray-300 dark:border-gray-700 rounded-lg bg-white dark:bg-gray-800"
            >
              {goals.map(goal => (
                <option key={goal.id} value={goal.id}>{goal.name}</option>
              ))}
            </select>
            
            <button 
              onClick={openCreateModal}
              className="bg-blue-600 hover:bg-blue-700 text-white px-4 py-2 rounded-lg flex items-center gap-2 transition-all font-semibold"
            >
              <i className="fas fa-plus"></i> New Task
            </button>
          </div>
        </header>

        {/* Stats Cards */}
        <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-4 mb-8">
          <div className="bg-white dark:bg-gray-800 p-4 rounded-lg shadow">
            <h3 className="text-3xl font-bold text-blue-600 dark:text-blue-400">{totalTasks}</h3>
            <p className="text-gray-600 dark:text-gray-400">Total Tasks</p>
          </div>
          <div className="bg-white dark:bg-gray-800 p-4 rounded-lg shadow">
            <h3 className="text-3xl font-bold text-green-500">{completedTasks}</h3>
            <p className="text-gray-600 dark:text-gray-400">Completed</p>
          </div>
          <div className="bg-white dark:bg-gray-800 p-4 rounded-lg shadow">
            <h3 className="text-3xl font-bold text-yellow-500">{inProgressTasks}</h3>
            <p className="text-gray-600 dark:text-gray-400">In Progress</p>
          </div>
          <div className="bg-white dark:bg-gray-800 p-4 rounded-lg shadow">
            <h3 className="text-3xl font-bold text-red-500">{overdueTasks}</h3>
            <p className="text-gray-600 dark:text-gray-400">Overdue</p>
          </div>
        </div>

        <div className="flex flex-col lg:flex-row gap-6">
          {/* Filters Section */}
          <div className="w-full lg:w-1/4">
            <div className="bg-white dark:bg-gray-800 p-4 rounded-lg shadow mb-6">
              <h3 className="text-lg font-semibold mb-4">Filters</h3>
              
              <div className="mb-4">
                <label className="block mb-2 font-medium">Status</label>
                <select 
                  value={statusFilter} 
                  onChange={(e) => setStatusFilter(e.target.value)}
                  className="w-full px-3 py-2 border border-gray-300 dark:border-gray-700 rounded-lg bg-white dark:bg-gray-800"
                >
                  <option value="all">All Status</option>
                  <option value="todo">To Do</option>
                  <option value="inprogress">In Progress</option>
                  <option value="completed">Completed</option>
                </select>
              </div>
              
              <div className="mb-4">
                <label className="block mb-2 font-medium">Priority</label>
                <select 
                  value={priorityFilter} 
                  onChange={(e) => setPriorityFilter(e.target.value)}
                  className="w-full px-3 py-2 border border-gray-300 dark:border-gray-700 rounded-lg bg-white dark:bg-gray-800"
                >
                  <option value="all">All Priorities</option>
                  <option value="high">High</option>
                  <option value="medium">Medium</option>
                  <option value="low">Low</option>
                </select>
              </div>
              
              <div className="mb-4">
                <label className="block mb-2 font-medium">Assignee</label>
                <select 
                  value={assigneeFilter} 
                  onChange={(e) => setAssigneeFilter(e.target.value)}
                  className="w-full px-3 py-2 border border-gray-300 dark:border-gray-700 rounded-lg bg-white dark:bg-gray-800"
                >
                  <option value="all">All Assignees</option>
                  {users.map(user => (
                    <option key={user.id} value={user.id}>
                      {user.firstName} {user.lastName}
                    </option>
                  ))}
                </select>
              </div>
            </div>
          </div>

          {/* Task List */}
          <div className="w-full lg:w-3/4">
            <div className="bg-white dark:bg-gray-800 rounded-lg shadow">
              <div className="p-4 border-b border-gray-200 dark:border-gray-700 flex flex-col sm:flex-row justify-between items-start sm:items-center gap-4">
                <h2 className="text-xl font-semibold">Tasks</h2>
                
                <div className="flex items-center gap-2">
                  <span>Sort by:</span>
                  <select 
                    value={sortBy} 
                    onChange={(e) => setSortBy(e.target.value)}
                    className="px-3 py-1 border border-gray-300 dark:border-gray-700 rounded-lg bg-white dark:bg-gray-800"
                  >
                    <option value="newest">Newest First</option>
                    <option value="oldest">Oldest First</option>
                    <option value="dueDate">Due Date</option>
                    <option value="priority">Priority</option>
                  </select>
                </div>
              </div>
              
              <div className="p-4">
                {visibleTasks.length > 0 ? (
                  visibleTasks.map(task => {
                    const dueStatus = getDueDateStatus(task.dueDate, task.status);
                    const statusBadgeClass = getStatusBadgeClass(task.status);
                    const priorityBadgeClass = getPriorityBadgeClass(task.priority);
                    
                    return (
                      <div 
                        key={task.id}
                        className={`mb-4 p-4 rounded-lg border-l-4 bg-white dark:bg-gray-800 shadow-sm 
                          ${task.priority === 'high' ? 'border-red-500' : 
                            task.priority === 'medium' ? 'border-yellow-500' : 'border-green-500'}
                          ${dueStatus === 'overdue' ? 'bg-red-50 dark:bg-red-900/20' : 
                            dueStatus === 'dueSoon' ? 'bg-yellow-50 dark:bg-yellow-900/20' : ''}
                        `}
                      >
                        <div className="flex flex-col sm:flex-row justify-between gap-2">
                          <div>
                            <h3 className="font-semibold text-lg">{task.title}</h3>
                            <p className="text-gray-600 dark:text-gray-400 mt-1">{task.description || 'No description'}</p>
                          </div>
                          <div className="flex sm:flex-col sm:items-end gap-2">
                            <span className={`${priorityBadgeClass} text-xs px-2 py-1 rounded-full`}>
                              {getPriorityText(task.priority)}
                            </span>
                            <span className={`${statusBadgeClass} text-xs px-2 py-1 rounded-full`}>
                              {getStatusText(task.status)}
                            </span>
                            {dueStatus === 'overdue' && (
                              <span className="bg-red-100 dark:bg-red-900 text-red-800 dark:text-red-200 text-xs px-2 py-1 rounded-full">
                                Overdue
                              </span>
                            )}
                            {dueStatus === 'dueSoon' && (
                              <span className="bg-yellow-100 dark:bg-yellow-900 text-yellow-800 dark:text-yellow-200 text-xs px-2 py-1 rounded-full">
                                Due Soon
                              </span>
                            )}
                          </div>
                        </div>
                        
                        <div className="flex flex-col sm:flex-row justify-between items-start sm:items-center mt-4 gap-2">
                          <div className="flex items-center gap-2">
                            <span className="text-sm flex items-center gap-1">
                              <i className="fas fa-user text-gray-500"></i> {getAssigneeName(task.assigneeId)}
                            </span>
                          </div>
                          
                          <div className="flex items-center gap-2">
                            <span className={`text-sm flex items-center gap-1 ${
                              dueStatus === 'overdue' ? 'text-red-600 dark:text-red-400' :
                              dueStatus === 'dueSoon' ? 'text-yellow-600 dark:text-yellow-400' :
                              'text-green-600 dark:text-green-400'
                            }`}>
                              <i className="fas fa-clock"></i> Due: {task.dueDate ? new Date(task.dueDate).toLocaleDateString() : 'No due date'}
                            </span>
                            <div className="flex gap-2">
                              <button 
                                onClick={() => openEditModal(task)}
                                className="text-blue-600 dark:text-blue-400 hover:text-blue-800 dark:hover:text-blue-200"
                              >
                                <i className="fas fa-edit"></i>
                              </button>
                              <button 
                                onClick={() => openConfirmModal(task.id)}
                                className="text-red-600 dark:text-red-400 hover:text-red-800 dark:hover:text-red-200"
                              >
                                <i className="fas fa-trash"></i>
                              </button>
                            </div>
                          </div>
                        </div>
                      </div>
                    );
                  })
                ) : (
                  <p className="text-center text-gray-500">No tasks found. Try adjusting your filters.</p>
                )}
              </div>
            </div>
          </div>
        </div>
      </div>

      {/* Create Task Modal */}
      {showCreateModal && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4">
          <div className="bg-white dark:bg-gray-800 rounded-lg w-11/12 md:w-2/3 lg:w-1/2 max-h-[90vh] overflow-y-auto">
            <div className="p-6 border-b border-gray-200 dark:border-gray-700 flex justify-between items-center">
              <h2 className="text-xl font-semibold">Create New Task</h2>
              <button onClick={closeCreateModal} className="text-gray-500 hover:text-gray-700 dark:hover:text-gray-300">
                <i className="fas fa-times"></i>
              </button>
            </div>
            
            <form className="p-6" onSubmit={handleCreateTask}>
              <div className="mb-4">
                <label className="block mb-2 font-medium">Title *</label>
                <input 
                  type="text" 
                  name="taskTitle"
                  className="w-full px-3 py-2 border border-gray-300 dark:border-gray-700 rounded-lg bg-white dark:bg-gray-800" 
                  required 
                />
              </div>
              
              <div className="mb-4">
                <label className="block mb-2 font-medium">Description</label>
                <textarea 
                  name="taskDescription"
                  className="w-full px-3 py-2 border border-gray-300 dark:border-gray-700 rounded-lg bg-white dark:bg-gray-800" 
                  rows="3"
                ></textarea>
              </div>

              <div className="grid grid-cols-1 md:grid-cols-2 gap-4 mb-4">
                <div>
                  <label className="block mb-2 font-medium">Assignee</label>
                  <select name="taskAssignee" className="w-full px-3 py-2 border border-gray-300 dark:border-gray-700 rounded-lg bg-white dark:bg-gray-800">
                    <option value="">Select assignee</option>
                    {users.map(user => (
                      <option key={user.id} value={user.id}>
                        {user.firstName} {user.lastName}
                      </option>
                    ))}
                  </select>
                </div>
                
                <div>
                  <label className="block mb-2 font-medium">Due Date</label>
                  <input 
                    type="date" 
                    name="taskDueDate"
                    className="w-full px-3 py-2 border border-gray-300 dark:border-gray-700 rounded-lg bg-white dark:bg-gray-800" 
                  />
                </div>
              </div>
              
              <div className="grid grid-cols-1 md:grid-cols-2 gap-4 mb-4">
                <div>
                  <label className="block mb-2 font-medium">Priority</label>
                  <select name="taskPriority" className="w-full px-3 py-2 border border-gray-300 dark:border-gray-700 rounded-lg bg-white dark:bg-gray-800">
                    <option value="low">Low</option>
                    <option value="medium">Medium</option>
                    <option value="high">High</option>
                  </select>
                </div>
                
                <div>
                  <label className="block mb-2 font-medium">Status</label>
                  <select name="taskStatus" className="w-full px-3 py-2 border border-gray-300 dark:border-gray-700 rounded-lg bg-white dark:bg-gray-800">
                    <option value="todo">To Do</option>
                    <option value="inprogress">In Progress</option>
                    <option value="completed">Completed</option>
                  </select>
                </div>
              </div>
              
              <div className="p-6 border-t border-gray-200 dark:border-gray-700 flex justify-end gap-4">
                <button 
                  type="button"
                  onClick={closeCreateModal}
                  className="px-4 py-2 border border-gray-300 dark:border-gray-600 rounded-lg hover:bg-gray-100 dark:hover:bg-gray-700 transition-colors"
                >
                  Cancel
                </button>
                <button 
                  type="submit"
                  className="px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors"
                >
                  Create Task
                </button>
              </div>
            </form>
          </div>
        </div>
      )}

      {/* Edit Task Modal */}
      {showEditModal && editTaskData && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4">
          <div className="bg-white dark:bg-gray-800 rounded-lg w-11/12 md:w-2/3 lg:w-1/2 max-h-[90vh] overflow-y-auto">
            <div className="p-6 border-b border-gray-200 dark:border-gray-700 flex justify-between items-center">
              <h2 className="text-xl font-semibold">Edit Task</h2>
              <button onClick={closeEditModal} className="text-gray-500 hover:text-gray-700 dark:hover:text-gray-300">
                <i className="fas fa-times"></i>
              </button>
            </div>
            
            <form className="p-6" onSubmit={handleEditTask}>
              <div className="mb-4">
                <label className="block mb-2 font-medium">Title *</label>
                <input 
                  type="text" 
                  name="editTaskTitle"
                  className="w-full px-3 py-2 border border-gray-300 dark:border-gray-700 rounded-lg bg-white dark:bg-gray-800" 
                  defaultValue={editTaskData.title}
                  required 
                />
              </div>
              
              <div className="mb-4">
                <label className="block mb-2 font-medium">Description</label>
                <textarea 
                  name="editTaskDescription"
                  className="w-full px-3 py-2 border border-gray-300 dark:border-gray-700 rounded-lg bg-white dark:bg-gray-800" 
                  rows="3"
                  defaultValue={editTaskData.description}
                ></textarea>
              </div>
              
              <div className="grid grid-cols-1 md:grid-cols-2 gap-4 mb-4">
                <div>
                  <label className="block mb-2 font-medium">Assignee</label>
                  <select 
                    name="editTaskAssignee"
                    className="w-full px-3 py-2 border border-gray-300 dark:border-gray-700 rounded-lg bg-white dark:bg-gray-800"
                    defaultValue={editTaskData.assigneeId || ''}
                  >
                    <option value="">Select assignee</option>
                    {users.map(user => (
                      <option key={user.id} value={user.id}>
                        {user.firstName} {user.lastName}
                      </option>
                    ))}
                  </select>
                </div>
                
                <div>
                  <label className="block mb-2 font-medium">Due Date</label>
                  <input 
                    type="date" 
                    name="editTaskDueDate"
                    className="w-full px-3 py-2 border border-gray-300 dark:border-gray-700 rounded-lg bg-white dark:bg-gray-800" 
                    defaultValue={editTaskData.dueDate}
                  />
                </div>
              </div>
              
              <div className="grid grid-cols-1 md:grid-cols-2 gap-4 mb-4">
                <div>
                  <label className="block mb-2 font-medium">Priority</label>
                  <select 
                    name="editTaskPriority"
                    className="w-full px-3 py-2 border border-gray-300 dark:border-gray-700 rounded-lg bg-white dark:bg-gray-800"
                    defaultValue={editTaskData.priority}
                  >
                    <option value="low">Low</option>
                    <option value="medium">Medium</option>
                    <option value="high">High</option>
                  </select>
                </div>
                
                <div>
                  <label className="block mb-2 font-medium">Status</label>
                  <select 
                    name="editTaskStatus"
                    className="w-full px-3 py-2 border border-gray-300 dark:border-gray-700 rounded-lg bg-white dark:bg-gray-800"
                    defaultValue={editTaskData.status}
                  >
                    <option value="todo">To Do</option>
                    <option value="inprogress">In Progress</option>
                    <option value="completed">Completed</option>
                  </select>
                </div>
              </div>

              <div className="p-6 border-t border-gray-200 dark:border-gray-700 flex justify-end gap-4">
                <button 
                  type="button"
                  onClick={closeEditModal}
                  className="px-4 py-2 border border-gray-300 dark:border-gray-600 rounded-lg hover:bg-gray-100 dark:hover:bg-gray-700 transition-colors"
                >
                  Cancel
                </button>
                <button 
                  type="submit"
                  className="px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors"
                >
                  Save Changes
                </button>
              </div>
            </form>
          </div>
        </div>
      )}

      {/* Confirmation Modal */}
      {showConfirmModal && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4">
          <div className="bg-white dark:bg-gray-800 rounded-lg p-6 w-96 text-center">
            <h3 className="text-xl font-bold mb-4">Confirm Deletion</h3>
            <p className="text-gray-600 dark:text-gray-400 mb-6">Are you sure you want to delete this task?</p>
            <div className="flex justify-center gap-4">
              <button
                onClick={closeConfirmModal}
                className="px-4 py-2 border border-gray-300 dark:border-gray-600 rounded-lg hover:bg-gray-100 dark:hover:bg-gray-700 transition-colors"
              >
                Cancel
              </button>
              <button
                onClick={handleDeleteTask}
                className="px-4 py-2 bg-red-600 text-white rounded-lg hover:bg-red-700 transition-colors"
              >
                Delete
              </button>
            </div>
          </div>
        </div>
      )}
    </div>
  );
};

export default App;


const { title, description, assigneeId, dueDate, status, priority, progress } = req.body;

const query = `
  UPDATE "Tasks"
  SET title = $1, description = $2, "assigneeId" = $3, "dueDate" = $4,
      status = $5, priority = $6, progress = $7, "updatedAt" = NOW()
  WHERE id = $8
  RETURNING *;
`;
const { rows } = await client.query(query, [
  title.trim(),
  description?.trim() || null,
  assigneeId || null,
  dueDate || null,
  status || 'Not Started',
  priority || 'Medium',
  progress || 0,
  taskId,
]);

JSON File /////////////////////////////////////////

{
  "admin": {
    "users": {
      "errors": {
        "usernameExists": "Username already exists. Please choose a different one.",
        "usernameRequired": "Username is required",
        "nameRequired": "Name is required",
        "passwordRequired": "Password is required",
        "roleRequired": "Role is required"
      },
      "form": {
        "passwordStrong": "Password is strong"
      }
    },
    "actions": {
      "processing": "Processing...",
      "deleting": "Deleting..."
    }
  }
}


role ui ////////////////////////////////////////////////////////////////////////////////////////////
const RolesTab = ({ showToast, isAdmin }) => {
  // Mock roles and permissions data
  const [roles, setRoles] = useState([
    { id: 'admin', name: 'Admin' },
    { id: 'projectLead', name: 'Project Lead' },
    { id: 'clerk', name: 'Clerk' },
  ]);

  const [permissions, setPermissions] = useState([
    { id: 'createProject', name: 'Create Project', admin: true, projectLead: true, clerk: false },
    { id: 'editProject', name: 'Edit Project', admin: true, projectLead: true, clerk: false },
    { id: 'deleteProject', name: 'Delete Project', admin: true, projectLead: false, clerk: false },
    { id: 'viewReports', name: 'View Reports', admin: true, projectLead: true, clerk: true },
    { id: 'manageUsers', name: 'Manage Users', admin: true, projectLead: false, clerk: false },
  ]);

  const [selectedRole, setSelectedRole] = useState(roles[0]?.id); // State for active role in list
  const [showAddRoleModal, setShowAddRoleModal] = useState(false);
  const [newRoleName, setNewRoleName] = useState('');

  const handlePermissionChange = (permissionId, roleId, isChecked) => {
    if (!isAdmin) {
      showToast('Only administrators can modify permissions.', 'error');
      return;
    }
    setPermissions(prevPermissions =>
      prevPermissions.map(perm =>
        perm.id === permissionId
          ? { ...perm, [roleId]: isChecked }
          : perm
      )
    );
    showToast('Permissions updated.', 'info');
  };

  const handleAddRole = () => {
    if (!isAdmin) {
      showToast('Only administrators can add roles.', 'error');
      return;
    }
    if (!newRoleName.trim()) {
      showToast('Role name cannot be empty.', 'error');
      return;
    }
    const newId = newRoleName.toLowerCase().replace(/\s/g, '');
    if (roles.some(role => role.id === newId)) {
      showToast('Role with this name already exists.', 'error');
      return;
    }

    const newRole = { id: newId, name: newRoleName };
    setRoles([...roles, newRole]);

    // Add new role's permissions (defaulting to false for all)
    setPermissions(prevPermissions =>
      prevPermissions.map(perm => ({
        ...perm,
        [newId]: false,
      }))
    );

    showToast(`Role '${newRoleName}' added.`, 'success');
    setNewRoleName('');
    setShowAddRoleModal(false);
    setSelectedRole(newId); // Select the newly added role
  };

  return (
    <section id="roles" role="tabpanel" aria-labelledby="roles-tab">
      <div className="grid grid-cols-12 gap-6">

        {/* Roles List */}
        <div className="col-span-12 md:col-span-4 lg:col-span-3 bg-white dark:bg-gray-800 p-4 rounded-lg shadow-sm border border-gray-200 dark:border-gray-700">
          <h2 className="text-lg font-medium mb-3 flex items-center gap-2"><Shield size={20} /> Roles</h2>
          {roles.length > 0 ? (
            <ul className="space-y-1 mb-4">
              {roles.map((role) => (
                <li key={role.id}>
                  <button
                    onClick={() => setSelectedRole(role.id)}
                    className={`w-full text-left p-3 rounded-md transition-colors duration-150 ${
                      selectedRole === role.id
                        ? 'bg-blue-500 text-white shadow-sm'
                        : 'hover:bg-gray-100 dark:hover:bg-gray-700'
                    }`}
                  >
                    {role.name}
                  </button>
                </li>
              ))}
            </ul>
          ) : (
            <div className="text-center text-gray-500 dark:text-gray-400 mb-4">
              <p>Define your first role.</p>
            </div>
          )}
          <button
            onClick={() => setShowAddRoleModal(true)}
            className="btn-secondary w-full flex items-center justify-center gap-2 px-4 py-2 rounded-md border border-gray-300 dark:border-gray-600 text-gray-700 dark:text-gray-300 hover:bg-gray-100 dark:hover:bg-gray-700 transition-colors duration-200"
            disabled={!isAdmin} // Disable if not admin
          >
            <Plus size={18} /> Add Role
          </button>
          {!isAdmin && (
            <p className="text-sm text-gray-500 dark:text-gray-400 mt-2">Switch to Admin Mode to add roles.</p>
          )}
        </div>

        {/* Permissions Matrix */}
        <div className="col-span-12 md:col-span-8 lg:col-span-9 overflow-x-auto bg-white dark:bg-gray-800 p-4 rounded-lg shadow-sm border border-gray-200 dark:border-gray-700">
          <h2 className="text-lg font-medium mb-3 flex items-center gap-2"><Settings size={20} /> Permissions</h2>
          <table className="min-w-full table-auto divide-y divide-gray-200 dark:divide-gray-700">
            <thead className="bg-gray-50 dark:bg-gray-700">
              <tr>
                <th className="px-4 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider">Permission</th>
                {roles.map((role) => (
                  <th key={role.id} className="px-4 py-3 text-center text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider">
                    {role.name}
                  </th>
                ))}
              </tr>
            </thead>
            <tbody className="bg-white dark:bg-gray-800 divide-y divide-gray-200 dark:divide-gray-700">
              {permissions.map((permission) => (
                <tr key={permission.id} className="hover:bg-gray-50 dark:hover:bg-gray-700 transition-colors duration-150">
                  <td className="px-4 py-3 whitespace-nowrap">{permission.name}</td>
                  {roles.map((role) => (
                    <td key={`${permission.id}-${role.id}`} className="px-4 py-3 whitespace-nowrap text-center">
                      <input
                        type="checkbox"
                        className="form-checkbox h-5 w-5 text-blue-600 rounded focus:ring-blue-500 dark:bg-gray-700 dark:border-gray-600 dark:checked:bg-blue-600 dark:checked:border-transparent"
                        checked={permission[role.id]} // Controlled component
                        onChange={(e) => handlePermissionChange(permission.id, role.id, e.target.checked)}
                        aria-label={`${permission.name} for ${role.name}`}
                        disabled={!isAdmin} // Disable if not admin
                      />
                    </td>
                  ))}
                </tr>
              ))}
            </tbody>
          </table>
          {!isAdmin && (
            <p className="text-sm text-gray-500 dark:text-gray-400 mt-4 text-center">Switch to Admin Mode to modify permissions.</p>
          )}
        </div>

      </div>

      {/* Add Role Modal */}
      {showAddRoleModal && (
        <div className="fixed inset-0 bg-gray-600 bg-opacity-50 flex items-center justify-center z-50">
          <div className="bg-white dark:bg-gray-800 p-6 rounded-lg shadow-xl w-full max-w-md">
            <h3 className="text-lg font-semibold mb-4">Add New Role</h3>
            <div className="space-y-4">
              <div>
                <label htmlFor="new-role-name" className="block text-sm font-medium text-gray-700 dark:text-gray-300">Role Name</label>
                <input
                  type="text"
                  id="new-role-name"
                  className="mt-1 block w-full p-2 border border-gray-300 dark:border-gray-600 rounded-md shadow-sm focus:ring-blue-500 focus:border-blue-500 bg-gray-50 dark:bg-gray-700 dark:text-white"
                  placeholder="e.g., Editor"
                  value={newRoleName}
                  onChange={(e) => setNewRoleName(e.target.value)}
                />
              </div>
            </div>
            <div className="mt-6 flex justify-end space-x-3">
              <button
                onClick={() => setShowAddRoleModal(false)}
                className="px-4 py-2 rounded-md border border-gray-300 dark:border-gray-600 text-gray-700 dark:text-gray-300 hover:bg-gray-100 dark:hover:bg-gray-700 transition-colors duration-200"
              >
                Cancel
              </button>
              <button
                onClick={handleAddRole}
                className="px-4 py-2 rounded-md bg-blue-600 hover:bg-blue-700 text-white font-medium shadow-sm transition-colors duration-200"
              >
                Add Role
              </button>
            </div>
          </div>
        </div>
      )}
    </section>
  );
};